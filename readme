本周的主题主要是协程相关
1、引子
  CPU切换主要是两种情况：
    正在执行的任务发生了阻塞
    该任务执行的时间较长或者是有更高优先级的程序替代了它
  第二种情形一般是不能提升系统效率，只是为了让其他程序能够很好的执行。
  可以使用python 中yield关键字来验证。yield本身就是一种在单线程下可以保存计算任务状态的方法。
    yield关键字可以保存状态，yield的状态保存与操作系统保存状态很像，但是yield是代码级别控制的，更加轻量级。
    send可以把一个函数的结果传给另一个函数，以保证单线程内程序之间的切换。
2、协程
  单线程实现并发，本质就是由用户主机控制一个任务遇到IO阻塞了就切换到另一个任务去执行，一次来提升效率。
  在应用程序中控制多个任务的切换和保存任务
  优点：应用程序级别切换速度远远高于操作系统
  缺点：多个任务一旦有一个阻塞没有切换，整个线程都阻塞在原地，该线程内的其他任务都无法执行。
    greenlet
      要想实现多个任务之间的切换，yield关键字过于麻烦
      greenlet需要手动切换，这就造成程序并不一定是在阻塞的情况下进行切换的，那么单纯的的切换并不会是程序的执行速度得到提升。

    gevent
      是一个第三方库，轻松实现同步或者异步编程。在gevent中用到的主要模式是greenlet，他是以c扩展模块的形式接入python的轻量级协程。
      在gevent_test.py示例中模拟的是gevent可以识别的IO阻塞类型，而其他阻塞类型，比如time.sleep或者socket等，是无法识别的，需要打补丁。
      from gevent import monkey;monkey.patch_all()必须放到被打补丁者的前面，如time，socket模块之前

















